generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model prn_table {
  prn          String  @id
  email        String  @unique
  is_registerd Boolean
}

model College {
  college_id               String       @id @default(uuid())
  college_name             String
  address                  String
  principal                String
  vice_principal           String
  chair_person             Json
  departments              Department[] @relation("CollegeDepartments")
  teaching_staff_count     Int
  non_teaching_staff_count Int
}

model Department {
  department_id      String             @id @default(uuid())
  department_name    String
  hod                Faculty            @relation("DepartmentToFaculty", fields: [hodId], references: [faculty_id])
  hodId              String             @unique
  teaching_staff     Faculty[]          @relation("DepartmentTeachingStaff")
  non_teaching_staff NonTeachingStaff[] @relation("DepartmentNonTeachingStaff")
  students           Student[]          @relation("DepartmentStudents")
  student_count      Int
  girls              Int
  boys               Int
  alumnis            Student[]          @relation("DepartmentAlumni")

  College   College? @relation("CollegeDepartments", fields: [collegeId], references: [college_id])
  collegeId String?

  Student Student[]
}

model Faculty {
  faculty_id        String       @id @default(uuid())
  first_name        String
  middle_name       String
  last_name         String
  highest_education String
  address           String
  email             String
  contact_no        String
  username          String       @unique
  department        Department?  @relation("DepartmentToFaculty") // Made optional
  department_id     String?
  subjects          Subject[]    @relation("FacultySubjects")
  syllabus          Syllabus[]
  attendance        Attendance[]

  Department Department[] @relation("DepartmentTeachingStaff")
}

model Subject {
  subject_id     String         @id @unique @default(uuid())
  subject_name   String
  required_hours String
  have_practical Boolean
  syllabus       Syllabus?
  studyMaterial  StudyMaterial?
  faculty        Faculty[]      @relation("FacultySubjects")
  attendance     Attendance[]
  results        Result[]
}

model Syllabus {
  subject_id     String  @id
  reference_link Json
  practicals     Json
  faculty        Faculty @relation(fields: [faculty_id], references: [faculty_id])
  faculty_id     String
  subject        Subject @relation(fields: [subject_id], references: [subject_id])
}

model StudyMaterial {
  subject_id String   @id
  notes      String[]
  exams      Json
  subject    Subject  @relation(fields: [subject_id], references: [subject_id])
}

model Result {
  student_id      String
  subject_id      String
  gained_marks    Int
  total_marks     Int
  status          Boolean
  semester_number Int
  academic_year   String
  student         Student @relation(fields: [student_id], references: [student_id])
  subject         Subject @relation(fields: [subject_id], references: [subject_id])

  @@id([student_id, subject_id])
}

model Student {
  student_id       String       @id
  first_name       String
  middle_name      String
  last_name        String
  email            String
  address          String
  username         String       @unique
  department       Department   @relation(fields: [department_id], references: [department_id])
  department_id    String
  current_year     String
  current_semester String
  results          Result[]
  attendance       Attendance[]

  departmentStudents Department[] @relation("DepartmentStudents")
  departmentAlumni   Department[] @relation("DepartmentAlumni")
}

model Attendance {
  id            String   @id @default(uuid())
  student       Student  @relation(fields: [student_id], references: [student_id])
  student_id    String
  subject       Subject  @relation(fields: [subject_id], references: [subject_id])
  subject_id    String
  teacher       Faculty  @relation(fields: [teacher_id], references: [faculty_id])
  teacher_id    String
  date          DateTime
  time          DateTime
  duration      Int
  status        Boolean
  academic_year String
  semester      Int
}

model NonTeachingStaff {
  id            String      @id @default(uuid())
  first_name    String
  middle_name   String
  last_name     String
  address       String
  position      String
  contact       String
  username      String      @unique
  department    Department? @relation("DepartmentNonTeachingStaff", fields: [department_id], references: [department_id])
  department_id String?
}
